# Python Django

# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# trigger set to main branch
trigger:
- main



# The matrix strategy allows you to test the project on multiple versions of Python.
pool:
  # pool is set to ubuntu-latest
  vmImage: ubuntu-latest
  # matrix strategy is used to test the project on multiple versions of Python
strategy:
  matrix:
    Python38:
      PYTHON_VERSION: '3.8'
    Python39:
      PYTHON_VERSION: '3.9'
    Python310:
      PYTHON_VERSION: '3.10'
      # maxParallel is set to 3
  maxParallel: 3

  # steps are defined to install the required dependencies and run the tests
steps:
  # Use Python version
- task: UsePythonVersion@0
  inputs:
    # Python version is set to $(PYTHON_VERSION)
    versionSpec: '$(PYTHON_VERSION)'
    # architecture is set to x64
    architecture: 'x64'

    # Install dependencies
- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

# script is there to install prerequisites
- script: |
    python -m pip install --upgrade pip setuptools wheel
    python -m venv venv
    . venv/bin/activate
    pip install -r requirements.txt
    pip install unittest-xml-reporting
    pip install django
    echo "Python version:"
    python --version
    echo "Installed packages:"
    pip list
  displayName: 'Install prerequisites'

# Instal virtual env to run testing 
- script: |
    . venv/bin/activate
    cd '$(projectRoot)'
    echo "Running tests in project root: $(projectRoot)"
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input   
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/TEST-*.xml'
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()
